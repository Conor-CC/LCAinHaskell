
==================== FINAL INTERFACE ====================
2018-10-05 18:20:24.367362425 UTC

interface lca-0.1.0.0-qhAiKsH4BBFHBEvU3XyBo:BStree 8043
  interface hash: 13a6c80d8d748a6fa10b9b882f51b4cc
  ABI hash: ba69cdba065f5ea0a22cb7988043f3ba
  export-list hash: bb879b4cd7c675be6118e702715a21e9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1f596daf84c7527444ae092b33472386
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  BStree.mylca
  BStree.treeDelete
  BStree.treeElem
  BStree.treeFromList
  BStree.treeHeight
  BStree.treeInsert
  BStree.treeLeftChild
  BStree.treeLeftRotate
  BStree.treeMax
  BStree.treeMin
  BStree.treeNode
  BStree.treeRightChild
  BStree.treeRightRotate
  BStree.treeRoot
  BStree.treeSize
  BStree.treeToList
  BStree.Tree{BStree.EmptyTree BStree.Node}
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Read b9e6d20d40da8c8a12b566d22e1160e0
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:Text.ParserCombinators.ReadPrec d0ebf984ed486435a97481288b73febb
import  -/  base-4.11.1.0:Text.Read.Lex f8ad6f9ae74ae325ba69a4fa5c82aaca
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
762ae3e93352272c6d9ced58b1826863
  $fEqTree :: GHC.Classes.Eq a => GHC.Classes.Eq (BStree.Tree a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (BStree.Tree a)
                  (BStree.$fEqTree_$c== @ a v)
                  (BStree.$fEqTree_$c/= @ a v) -}
762ae3e93352272c6d9ced58b1826863
  $fEqTree_$c/= ::
    GHC.Classes.Eq a =>
    BStree.Tree a -> BStree.Tree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: BStree.Tree a)
                   (y :: BStree.Tree a) ->
                 case BStree.$fEqTree_$c== @ a $dEq x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
762ae3e93352272c6d9ced58b1826863
  $fEqTree_$c== ::
    GHC.Classes.Eq a =>
    BStree.Tree a -> BStree.Tree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
762ae3e93352272c6d9ced58b1826863
  $fReadTree :: GHC.Read.Read a => GHC.Read.Read (BStree.Tree a)
  DFunId
  {- Arity: 1, Strictness: <L,U(A,A,C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Read.Read a).
                  @ (BStree.Tree a)
                  (BStree.$fReadTree_$creadsPrec @ a v)
                  (BStree.$fReadTree_$creadList @ a v)
                  (BStree.$fReadTree_$creadPrec @ a v)
                  (BStree.$fReadTree_$creadListPrec @ a v) -}
762ae3e93352272c6d9ced58b1826863
  $fReadTree_$creadList ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadP.ReadS [BStree.Tree a]
  {- Arity: 1, Strictness: <L,U(A,A,C(C1(U)),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dRead :: GHC.Read.Read a) ->
                 Text.ParserCombinators.ReadP.run
                   @ [BStree.Tree a]
                   (((GHC.Read.list
                        @ (BStree.Tree a)
                        (BStree.$fReadTree_$creadPrec @ a $dRead))
                       `cast`
                     (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <[BStree.Tree a]>_R)
                       GHC.Read.$fRead()8)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <[BStree.Tree a]>_R)
                      @ [BStree.Tree a]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [BStree.Tree a]))) -}
762ae3e93352272c6d9ced58b1826863
  $fReadTree_$creadListPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec [BStree.Tree a]
  {- Arity: 1, Strictness: <L,U(A,A,C(C1(U)),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dRead :: GHC.Read.Read a) ->
                 GHC.Read.list
                   @ (BStree.Tree a)
                   (BStree.$fReadTree_$creadPrec @ a $dRead)) -}
762ae3e93352272c6d9ced58b1826863
  $fReadTree_$creadPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec (BStree.Tree a)
  {- Arity: 1, Strictness: <L,U(A,A,C(C1(U)),A)> -}
762ae3e93352272c6d9ced58b1826863
  $fReadTree_$creadsPrec ::
    GHC.Read.Read a =>
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS (BStree.Tree a)
  {- Arity: 1, Strictness: <L,U(A,A,C(C1(U)),A)>,
     Unfolding: (\ @ a ($dRead :: GHC.Read.Read a) ->
                 let {
                   ds :: Text.ParserCombinators.ReadPrec.ReadPrec (BStree.Tree a)
                   = BStree.$fReadTree_$creadPrec @ a $dRead
                 } in
                 \ (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (BStree.Tree a)
                   ((ds
                       `cast`
                     (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <BStree.Tree a>_R)
                       n)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <BStree.Tree a>_R)
                      @ (BStree.Tree a)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (BStree.Tree a)))) -}
762ae3e93352272c6d9ced58b1826863
  $fShowTree :: GHC.Show.Show a => GHC.Show.Show (BStree.Tree a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (BStree.Tree a)
                  (BStree.$fShowTree_$cshowsPrec @ a v)
                  (BStree.$fShowTree_$cshow @ a v)
                  (BStree.$fShowTree_$cshowList @ a v) -}
948e8b28f925dfc37f114e78294ecdd2
  $fShowTree1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
762ae3e93352272c6d9ced58b1826863
  $fShowTree_$cshow ::
    GHC.Show.Show a => BStree.Tree a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: BStree.Tree a) ->
                 BStree.$fShowTree_$cshowsPrec
                   @ a
                   $dShow
                   BStree.$fShowTree1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
762ae3e93352272c6d9ced58b1826863
  $fShowTree_$cshowList ::
    GHC.Show.Show a => [BStree.Tree a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [BStree.Tree a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (BStree.Tree a)
                   (BStree.$fShowTree_$cshowsPrec @ a $dShow BStree.$fShowTree1)
                   ls
                   s) -}
762ae3e93352272c6d9ced58b1826863
  $fShowTree_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> BStree.Tree a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><L,1*U(U)><S,1*U> -}
4e1850ade6c133f2665eb75fdd6d90ac
  $tc'EmptyTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7239122455766841322##
                   10083176157811196680##
                   BStree.$trModule
                   BStree.$tc'EmptyTree2
                   1#
                   BStree.$tc'EmptyTree1) -}
d2140a77d8a2bcd17774eeb326471885
  $tc'EmptyTree1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
7b43c247efaed1673f1f4982062f73b1
  $tc'EmptyTree2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BStree.$tc'EmptyTree3) -}
ae4fe66e0f7137ee8022b68a02b07518
  $tc'EmptyTree3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EmptyTree"#) -}
899f94f4d50ecad64fa80e771d7c3555
  $tc'Node :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4014515252319259503##
                   190855729617650352##
                   BStree.$trModule
                   BStree.$tc'Node2
                   1#
                   BStree.$tc'Node1) -}
ba332fc2319a8b4915cf8d31be12535b
  $tc'Node1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2c4318065e3879011ca103834a59f2e9
  $tc'Node2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BStree.$tc'Node3) -}
c6eb3a1cfa4d2d013f8850c8fd7fd942
  $tc'Node3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Node"#) -}
5ad3b0e7c42c8df02fe5849bbea0911a
  $tcTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7599719348383114341##
                   7993095907305356536##
                   BStree.$trModule
                   BStree.$tcTree1
                   0#
                   GHC.Types.krep$*Arr*) -}
b421db4a304c7c004d7c2361db3db127
  $tcTree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BStree.$tcTree2) -}
a948d63e37e85e3279087a988c3637cc
  $tcTree2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tree"#) -}
6bae70c7bcd453f84cc71adabccf5dd6
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   BStree.$trModule3
                   BStree.$trModule1) -}
025e3e8760a7eb3c641c379832334c17
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BStree.$trModule2) -}
301515cb930cf78fae48ccfeec823249
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BStree"#) -}
cba4083713ca3782bc3656c664eb589d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BStree.$trModule4) -}
2713536d0c928fcfa9556202f4c5b8e9
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("lca-0.1.0.0-qhAiKsH4BBFHBEvU3XyBo"#) -}
ba9e205cd29bfadf72c451743af7119a
  $wtreeHeight :: BStree.Tree a -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
d5e8002ea87442c993709752364293d9
  $wtreeInsert ::
    GHC.Classes.Ord a =>
    a -> BStree.Tree a -> (# a, (BStree.Tree a, BStree.Tree a) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,A,A)><L,U><S,1*U>,
     Inline: [0] -}
f17e142b6d06797290f3ae385f13ac6b
  $wtreeSize :: BStree.Tree a -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
762ae3e93352272c6d9ced58b1826863
  data Tree a = EmptyTree | Node a (BStree.Tree a, BStree.Tree a)
62ef77247835978d6512739fd06942a9
  mylca :: GHC.Classes.Ord a => a -> a -> BStree.Tree a -> a
  {- Arity: 4,
     Strictness: <S(LLC(C(S))LC(C(S))LLL),U(A,A,C(C1(U)),A,C(C1(U)),A,A,A)><L,U><L,U><L,1*U> -}
8dff0d5b690148a6df3e4b44b81758e3
  treeDelete ::
    GHC.Classes.Ord a => a -> BStree.Tree a -> BStree.Tree a
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A),A,C(C1(U)),A,C(C1(U)),A,A,A)><L,U><S,1*U> -}
71503c34ab10b7e3a8cadce36dd84db7
  treeElem ::
    GHC.Classes.Ord a => a -> BStree.Tree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,C(C1(U)),A,A,A)><L,U><S,1*U> -}
178de2317d16506103d493433a091de4
  treeFromList :: GHC.Classes.Ord a => [a] -> BStree.Tree a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,A,A)><S,1*U>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) (items :: [a]) ->
                 letrec {
                   go :: [a] -> BStree.Tree a {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [a]) ->
                     case ds of wild {
                       [] -> BStree.EmptyTree @ a
                       : y ys
                       -> case BStree.$wtreeInsert
                                 @ a
                                 $dOrd
                                 y
                                 (go ys) of ww { (#,#) ww1 ww2 ->
                          BStree.Node @ a ww1 ww2 } }
                 } in
                 go (GHC.List.reverse1 @ a items (GHC.Types.[] @ a))) -}
322dfd4647b5db513095ebbc73a41d82
  treeHeight :: BStree.Tree a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: BStree.Tree a) ->
                 case BStree.$wtreeHeight @ a w of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
cd127b24c09d4997931ee6f9b374a6b6
  treeInsert ::
    GHC.Classes.Ord a => a -> BStree.Tree a -> BStree.Tree a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,A,A)><L,U><S,1*U>m2,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: GHC.Classes.Ord a) (w1 :: a) (w2 :: BStree.Tree a) ->
                 case BStree.$wtreeInsert @ a w w1 w2 of ww { (#,#) ww1 ww2 ->
                 BStree.Node @ a ww1 ww2 }) -}
01871d316d9ef0e3f117ea8dcc50fbd9
  treeLeftChild :: BStree.Tree a -> BStree.Tree a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: BStree.Tree a) ->
                 case ds of wild {
                   BStree.EmptyTree -> BStree.treeLeftChild1 @ a
                   BStree.Node ds1 ds2
                   -> case ds2 of wild1 { (,) node ds3 -> node } }) -}
a85adf24c62c7e42b295db46a49f6b70
  treeLeftChild1 :: BStree.Tree a
  {- Strictness: x -}
98835fc47e6f5c4e4c6de2fffb4f7a62
  treeLeftRotate :: BStree.Tree a -> BStree.Tree a
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: BStree.Tree a) ->
                 case w of wild {
                   BStree.EmptyTree
                   -> case BStree.treeLeftRotate1 ret_ty (BStree.Tree a) of {}
                   BStree.Node x ds
                   -> case ds of wild1 { (,) alpha ds1 ->
                      case ds1 of wild2 {
                        BStree.EmptyTree
                        -> case BStree.treeLeftRotate1 ret_ty (BStree.Tree a) of {}
                        BStree.Node y ds2
                        -> case ds2 of wild3 { (,) beta gamma ->
                           BStree.Node
                             @ a
                             y
                             (BStree.Node @ a x (alpha, beta), gamma) } } } }) -}
f80635de6c8914ad9f125162e34d815d
  treeLeftRotate1 :: BStree.Tree a
  {- Strictness: x -}
ad3e0065402be7b1953963b842de7fec
  treeMax :: GHC.Classes.Eq a => BStree.Tree a -> a
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><S,1*U> -}
ba1fa2796a8c5de9ca8b7de7129c8640
  treeMin :: GHC.Classes.Eq a => BStree.Tree a -> a
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><S,1*U> -}
da901916da1d007b9e52a1d09cd8f688
  treeNode :: a -> BStree.Tree a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (item :: a) ->
                 BStree.Node @ a item (BStree.treeNode1 @ a)) -}
e72daf5b57d2bffa34d00850c4bf8d94
  treeNode1 :: (BStree.Tree a, BStree.Tree a)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (\ @ a ->
                 (BStree.EmptyTree @ a, BStree.EmptyTree @ a)) -}
977aadccb8f3674ce07dc76026a5df01
  treeRightChild :: BStree.Tree a -> BStree.Tree a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: BStree.Tree a) ->
                 case ds of wild {
                   BStree.EmptyTree -> BStree.treeRightChild1 @ a
                   BStree.Node ds1 ds2
                   -> case ds2 of wild1 { (,) ds3 node -> node } }) -}
d0fd3fb2d7b85b838f035b067c7c0635
  treeRightChild1 :: BStree.Tree a
  {- Strictness: x -}
0c3ac476c278c659c2c8912805424dfb
  treeRightRotate :: BStree.Tree a -> BStree.Tree a
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: BStree.Tree a) ->
                 case w of wild {
                   BStree.EmptyTree
                   -> case BStree.treeRightRotate1 ret_ty (BStree.Tree a) of {}
                   BStree.Node y ds
                   -> case ds of wild1 { (,) ds1 gamma ->
                      case ds1 of wild2 {
                        BStree.EmptyTree
                        -> case BStree.treeRightRotate1 ret_ty (BStree.Tree a) of {}
                        BStree.Node x ds2
                        -> case ds2 of wild3 { (,) alpha beta ->
                           BStree.Node
                             @ a
                             x
                             (alpha, BStree.Node @ a y (beta, gamma)) } } } }) -}
69b0ba626dee09bef093a48ac3592d82
  treeRightRotate1 :: BStree.Tree a
  {- Strictness: x -}
62204fa0be9339dde7cec687f8cc6fe3
  treeRoot :: BStree.Tree a -> a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: BStree.Tree a) ->
                 case ds of wild {
                   BStree.EmptyTree -> BStree.treeRoot1 @ a
                   BStree.Node item ds1
                   -> case ds1 of wild1 { (,) ds2 ds3 -> item } }) -}
25cb26024d21bf51c4bcf2ef4b0c556c
  treeRoot1 :: a
  {- Strictness: x -}
021b2bfa4fc480183bb995deccbb5298
  treeSize :: BStree.Tree a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: BStree.Tree a) ->
                 case BStree.$wtreeSize @ a w of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
d4a6220ae4bea020f606ed3f20178ca9
  treeToList :: BStree.Tree a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
instance [safe] GHC.Classes.Eq [BStree.Tree] = BStree.$fEqTree
instance [safe] GHC.Read.Read [BStree.Tree] = BStree.$fReadTree
instance [safe] GHC.Show.Show [BStree.Tree] = BStree.$fShowTree
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

